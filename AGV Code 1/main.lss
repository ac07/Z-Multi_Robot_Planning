
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000035c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000069  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d5  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000185  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a2  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ed  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a7  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8a:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <start_conv>:
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
  92:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
  94:	36 99       	sbic	0x06, 6	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <start_conv+0x2>
}
  98:	08 95       	ret

0000009a <init_adc>:

void init_adc()
{
	DDRA=0x00;
  9a:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	84 bb       	out	0x14, r24	; 20
	ADMUX=(1<<REFS0)|(0x3);
  a0:	83 e4       	ldi	r24, 0x43	; 67
  a2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	86 b9       	out	0x06, r24	; 6
}
  a8:	08 95       	ret

000000aa <sense>:
	while(ADCSRA&(1<<ADSC));
}

void init_adc()
{
	DDRA=0x00;
  aa:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xff;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
	ADMUX=(1<<REFS0)|(0x3);
  b0:	83 e4       	ldi	r24, 0x43	; 67
  b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1);
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	86 b9       	out	0x06, r24	; 6
    int i=0;
	int s=0;
	
	init_adc();
	
	ADMUX=(1<<REFS0)|(0x0);
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	87 b9       	out	0x07, r24	; 7
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
  bc:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
  be:	36 99       	sbic	0x06, 6	; 6
  c0:	fe cf       	rjmp	.-4      	; 0xbe <sense+0x14>
	
	init_adc();
	
	ADMUX=(1<<REFS0)|(0x0);
   	start_conv();
	i=ADC;	
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	87 39       	cpi	r24, 0x97	; 151
  cc:	91 05       	cpc	r25, r1
  ce:	14 f0       	brlt	.+4      	; 0xd4 <sense+0x2a>
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
	
	if(i>150)
		s |= 0b00000001;
	
	ADMUX=(1<<REFS0)|(0x01);
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	87 b9       	out	0x07, r24	; 7
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
  d8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
  da:	36 99       	sbic	0x06, 6	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <sense+0x30>
	if(i>150)
		s |= 0b00000001;
	
	ADMUX=(1<<REFS0)|(0x01);
   	start_conv();
	i=ADC;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	95 b1       	in	r25, 0x05	; 5
	if(i>150)
  e2:	87 39       	cpi	r24, 0x97	; 151
  e4:	91 05       	cpc	r25, r1
  e6:	0c f0       	brlt	.+2      	; 0xea <sense+0x40>
		s |= 0b00000010;
  e8:	22 60       	ori	r18, 0x02	; 2
		
	ADMUX=(1<<REFS0)|(0x02);
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	87 b9       	out	0x07, r24	; 7
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
  ee:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
  f0:	36 99       	sbic	0x06, 6	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <sense+0x46>
	if(i>150)
		s |= 0b00000010;
		
	ADMUX=(1<<REFS0)|(0x02);
   	start_conv();
	i=ADC;
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
	if(i>150)
  f8:	87 39       	cpi	r24, 0x97	; 151
  fa:	91 05       	cpc	r25, r1
  fc:	0c f0       	brlt	.+2      	; 0x100 <sense+0x56>
		s |= 0b00000100;
  fe:	24 60       	ori	r18, 0x04	; 4
		
	ADMUX=(1<<REFS0)|(0x03);
 100:	83 e4       	ldi	r24, 0x43	; 67
 102:	87 b9       	out	0x07, r24	; 7
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
 104:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
 106:	36 99       	sbic	0x06, 6	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <sense+0x5c>
	if(i>150)
		s |= 0b00000100;
		
	ADMUX=(1<<REFS0)|(0x03);
   	start_conv();
	i=ADC;
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	95 b1       	in	r25, 0x05	; 5
	if(i>150)
 10e:	87 39       	cpi	r24, 0x97	; 151
 110:	91 05       	cpc	r25, r1
 112:	0c f0       	brlt	.+2      	; 0x116 <sense+0x6c>
		s |= 0b00001000;
 114:	28 60       	ori	r18, 0x08	; 8
		
	ADMUX=(1<<REFS0)|(0x04);
 116:	84 e4       	ldi	r24, 0x44	; 68
 118:	87 b9       	out	0x07, r24	; 7
int sense(void);


void start_conv()
{
	ADCSRA|=(1<<ADSC);
 11a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
 11c:	36 99       	sbic	0x06, 6	; 6
 11e:	fe cf       	rjmp	.-4      	; 0x11c <sense+0x72>
	if(i>150)
		s |= 0b00001000;
		
	ADMUX=(1<<REFS0)|(0x04);
   	start_conv();
	i=ADC;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	95 b1       	in	r25, 0x05	; 5
	if(i>150)
 124:	87 39       	cpi	r24, 0x97	; 151
 126:	91 05       	cpc	r25, r1
 128:	0c f0       	brlt	.+2      	; 0x12c <sense+0x82>
		s |= 0b00010000;
	
	if(i>150)  
		s|=0x1;
 12a:	21 61       	ori	r18, 0x11	; 17
	
	//s |= 0xE0;
	return s;
}
 12c:	c9 01       	movw	r24, r18
 12e:	08 95       	ret

00000130 <main>:

void RFComm(void);
char DStar(void);

int main(void)
{
 130:	6f 92       	push	r6
 132:	7f 92       	push	r7
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
  char r=255;  
  int j=0;
  int k=0;
  int t=0;
  int p=0;
  DDRD=0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	81 bb       	out	0x11, r24	; 17
  DDRC=0xFF;
 150:	84 bb       	out	0x14, r24	; 20
  PORTC=0xFF;
 152:	85 bb       	out	0x15, r24	; 21
  
  
  PORTC=0x00;
 154:	15 ba       	out	0x15, r1	; 21
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15a:	20 e9       	ldi	r18, 0x90	; 144
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	f9 01       	movw	r30, r18
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <main+0x2e>
  _delay_ms(100);
  PORTC=0xFF;
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	95 bb       	out	0x15, r25	; 21
  PORTC=0x00;
  _delay_ms(1000);
  PORTC=0xFF;
  _delay_ms(1000);
  */
  PORTD=0x35;
 16c:	85 e3       	ldi	r24, 0x35	; 53
 16e:	82 bb       	out	0x12, r24	; 18
  
  TCCR1A=0xA1;
 170:	81 ea       	ldi	r24, 0xA1	; 161
 172:	8f bd       	out	0x2f, r24	; 47
  TCCR1B=0x01;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	8e bd       	out	0x2e, r24	; 46
  TCNT1H=0x00;
 178:	1d bc       	out	0x2d, r1	; 45
  TCNT1L=0xFF;
 17a:	9c bd       	out	0x2c, r25	; 44
  OCR1AH=0x00; 
 17c:	1b bc       	out	0x2b, r1	; 43
  OCR1AL=0x00;
 17e:	1a bc       	out	0x2a, r1	; 42
  OCR1BH=0x00; 
 180:	19 bc       	out	0x29, r1	; 41
  OCR1BL=0x00;
 182:	18 bc       	out	0x28, r1	; 40
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	ef ef       	ldi	r30, 0xFF	; 255
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	ee 24       	eor	r14, r14
 18e:	ff 24       	eor	r15, r15
			}
			else if(j>0)	//hard left
			{
				l=255;
				r=255;
				PORTD=0x33;
 190:	63 e3       	ldi	r22, 0x33	; 51
 192:	d6 2e       	mov	r13, r22
 194:	cc 24       	eor	r12, r12
 196:	ca 94       	dec	r12
			t=0;
			if(j<0)			//hard right
			{
				l=255;
				r=255;
				PORTD=0x3C;		
 198:	0c e3       	ldi	r16, 0x3C	; 60
		}	
		if(i==0b00011111)	// Intersection
		{	
			l=255;
			r=255;
			PORTD=0x35;
 19a:	15 e3       	ldi	r17, 0x35	; 53
			r=210+(kp*j)+(kd*k); //decrease right speed
			l=210-(kp*j)+(kd*k); // increase left speed	
		}
		else if(j>0)
		{
			r=210+(kp*j)+(kd*k);	//increase right speed
 19c:	54 e1       	ldi	r21, 0x14	; 20
 19e:	85 2e       	mov	r8, r21
 1a0:	91 2c       	mov	r9, r1
			l=210-(kp*j)+(kd*k);	//decrease left speed
 1a2:	4c ee       	ldi	r20, 0xEC	; 236
 1a4:	a4 2e       	mov	r10, r20
 1a6:	4f ef       	ldi	r20, 0xFF	; 255
 1a8:	b4 2e       	mov	r11, r20
 1aa:	30 ea       	ldi	r19, 0xA0	; 160
 1ac:	63 2e       	mov	r6, r19
 1ae:	3f e0       	ldi	r19, 0x0F	; 15
 1b0:	73 2e       	mov	r7, r19
  OCR1BH=0x00; 
  OCR1BL=0x00;
  
  while(1)
  {
	if(t<=0)
 1b2:	e1 14       	cp	r14, r1
 1b4:	f1 04       	cpc	r15, r1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <main+0x8a>
 1b8:	89 c0       	rjmp	.+274    	; 0x2cc <main+0x19c>
	{	
		p=t;
		i=sense();
 1ba:	0e 94 55 00 	call	0xaa	; 0xaa <sense>
 1be:	bc 01       	movw	r22, r24
		PORTC=i;
 1c0:	85 bb       	out	0x15, r24	; 21
		
		k=j;
	
		if(i==0b00000100)		//straight
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	91 05       	cpc	r25, r1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <main+0xa0>
		{	
			t=0;
			j=0;
			PORTD=0x35;
 1c8:	12 bb       	out	0x12, r17	; 18
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	16 c0       	rjmp	.+44     	; 0x1fc <main+0xcc>
	
		}
		if(i==0b000000110)		//soft left
 1d0:	86 30       	cpi	r24, 0x06	; 6
 1d2:	91 05       	cpc	r25, r1
 1d4:	21 f4       	brne	.+8      	; 0x1de <main+0xae>
		{	
			t=0;
			j=1;
			PORTD=0x35;
 1d6:	12 bb       	out	0x12, r17	; 18
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	12 c0       	rjmp	.+36     	; 0x202 <main+0xd2>
	
		}
		if(i==0b00000010)		//soft left
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <main+0xbc>
		{	
			t=0;
			j=1;					
			PORTD=0x35;
 1e4:	12 bb       	out	0x12, r17	; 18
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <main+0xe0>
	
		}	
		if(i==0b00000001)		//hard left
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	91 05       	cpc	r25, r1
 1f0:	21 f4       	brne	.+8      	; 0x1fa <main+0xca>
		{	
			t=0;
			j=3;
			PORTD=0x35;
 1f2:	12 bb       	out	0x12, r17	; 18
 1f4:	43 e0       	ldi	r20, 0x03	; 3
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <main+0xec>
 1fa:	ae 01       	movw	r20, r28
	
		}
	
		if(i==0b00001100)		//soft right
 1fc:	6c 30       	cpi	r22, 0x0C	; 12
 1fe:	71 05       	cpc	r23, r1
 200:	19 f0       	breq	.+6      	; 0x208 <main+0xd8>
			t=0;
			j=-1;
			PORTD=0x35;
	
		}	
		if(i==0b00001000)		//soft right
 202:	68 30       	cpi	r22, 0x08	; 8
 204:	71 05       	cpc	r23, r1
 206:	21 f4       	brne	.+8      	; 0x210 <main+0xe0>
		{	
			t=0;
			j=-1;
			PORTD=0x35;
 208:	12 bb       	out	0x12, r17	; 18
 20a:	4f ef       	ldi	r20, 0xFF	; 255
 20c:	5f ef       	ldi	r21, 0xFF	; 255
 20e:	06 c0       	rjmp	.+12     	; 0x21c <main+0xec>
		}	
		if(i==0b00010000)		//hard right
 210:	60 31       	cpi	r22, 0x10	; 16
 212:	71 05       	cpc	r23, r1
 214:	19 f4       	brne	.+6      	; 0x21c <main+0xec>
		{	
			t=0;
			j=-3;
			PORTD=0x35;
 216:	12 bb       	out	0x12, r17	; 18
 218:	4d ef       	ldi	r20, 0xFD	; 253
 21a:	5f ef       	ldi	r21, 0xFF	; 255
		}
		
		k=j-k;			// D control
 21c:	9a 01       	movw	r18, r20
 21e:	2c 1b       	sub	r18, r28
 220:	3d 0b       	sbc	r19, r29
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	9a 95       	dec	r25
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0xf4>
			r=210+(kp*j)+(kd*k); //decrease right speed
			l=210-(kp*j)+(kd*k); // increase left speed	
		}
		else if(j>0)
		{
			r=210+(kp*j)+(kd*k);	//increase right speed
 22c:	82 2f       	mov	r24, r18
 22e:	48 9d       	mul	r20, r8
 230:	90 01       	movw	r18, r0
 232:	49 9d       	mul	r20, r9
 234:	30 0d       	add	r19, r0
 236:	58 9d       	mul	r21, r8
 238:	30 0d       	add	r19, r0
 23a:	11 24       	eor	r1, r1
 23c:	e2 2f       	mov	r30, r18
 23e:	ee 52       	subi	r30, 0x2E	; 46
 240:	e8 0f       	add	r30, r24
			l=210-(kp*j)+(kd*k);	//decrease left speed
 242:	4a 9d       	mul	r20, r10
 244:	90 01       	movw	r18, r0
 246:	4b 9d       	mul	r20, r11
 248:	30 0d       	add	r19, r0
 24a:	5a 9d       	mul	r21, r10
 24c:	30 0d       	add	r19, r0
 24e:	11 24       	eor	r1, r1
 250:	2e 52       	subi	r18, 0x2E	; 46
 252:	28 0f       	add	r18, r24
		}	
	
		if(i==0b00001111) // hard left
 254:	6f 30       	cpi	r22, 0x0F	; 15
 256:	71 05       	cpc	r23, r1
 258:	21 f4       	brne	.+8      	; 0x262 <main+0x132>
		{	
			t=0;
			l=255;
			r=255;
			PORTD=0x33;
 25a:	d2 ba       	out	0x12, r13	; 18
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	ef ef       	ldi	r30, 0xFF	; 255
 260:	15 c0       	rjmp	.+42     	; 0x28c <main+0x15c>
		}	
		if(i==0b00000111)	// hard left
 262:	67 30       	cpi	r22, 0x07	; 7
 264:	71 05       	cpc	r23, r1
 266:	21 f4       	brne	.+8      	; 0x270 <main+0x140>
		{	
			t=0;
			l=255;
			r=255;
			PORTD=0x33;
 268:	d2 ba       	out	0x12, r13	; 18
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	ef ef       	ldi	r30, 0xFF	; 255
 26e:	11 c0       	rjmp	.+34     	; 0x292 <main+0x162>
		}	
		if(i==0b00000011)	// hard left	
 270:	63 30       	cpi	r22, 0x03	; 3
 272:	71 05       	cpc	r23, r1
 274:	21 f4       	brne	.+8      	; 0x27e <main+0x14e>
		{	
			t=0;
			l=255;
			r=255;
			PORTD=0x33;
 276:	d2 ba       	out	0x12, r13	; 18
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	ef ef       	ldi	r30, 0xFF	; 255
 27c:	0d c0       	rjmp	.+26     	; 0x298 <main+0x168>
		}
		if(i==0b00011110) // hard right
 27e:	6e 31       	cpi	r22, 0x1E	; 30
 280:	71 05       	cpc	r23, r1
 282:	21 f4       	brne	.+8      	; 0x28c <main+0x15c>
		{	
			t=0;
			l=255;
			r=255;
			PORTD=0x3C;
 284:	02 bb       	out	0x12, r16	; 18
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	ef ef       	ldi	r30, 0xFF	; 255
 28a:	1f c0       	rjmp	.+62     	; 0x2ca <main+0x19a>
		}
		if(i==0b00011000)	// hard right
 28c:	68 31       	cpi	r22, 0x18	; 24
 28e:	71 05       	cpc	r23, r1
 290:	91 f0       	breq	.+36     	; 0x2b6 <main+0x186>
			t=0;
			l=255;
			r=255;
			PORTD=0x3C;
		}
		if(i==0b00011100)	//hard right
 292:	6c 31       	cpi	r22, 0x1C	; 28
 294:	71 05       	cpc	r23, r1
 296:	79 f0       	breq	.+30     	; 0x2b6 <main+0x186>
			t=0;
			l=255;
			r=255;
			PORTD=0x3C;
		}	
		if(i==0b00011111)	// Intersection
 298:	6f 31       	cpi	r22, 0x1F	; 31
 29a:	71 05       	cpc	r23, r1
 29c:	41 f4       	brne	.+16     	; 0x2ae <main+0x17e>
		{	
			l=255;
			r=255;
			PORTD=0x35;
 29e:	12 bb       	out	0x12, r17	; 18
 2a0:	ea 01       	movw	r28, r20
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	ef ef       	ldi	r30, 0xFF	; 255
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	e8 2e       	mov	r14, r24
 2aa:	f1 2c       	mov	r15, r1
 2ac:	0f c0       	rjmp	.+30     	; 0x2cc <main+0x19c>
			t=1;
		}
	
		if(i==0x00)
 2ae:	67 2b       	or	r22, r23
 2b0:	61 f4       	brne	.+24     	; 0x2ca <main+0x19a>
		{	
			t=0;
			if(j<0)			//hard right
 2b2:	57 ff       	sbrs	r21, 7
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <main+0x18a>
			{
				l=255;
				r=255;
				PORTD=0x3C;		
 2b6:	02 bb       	out	0x12, r16	; 18
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <main+0x192>
			}
			else if(j>0)	//hard left
 2ba:	41 15       	cp	r20, r1
 2bc:	51 05       	cpc	r21, r1
 2be:	29 f0       	breq	.+10     	; 0x2ca <main+0x19a>
			{
				l=255;
				r=255;
				PORTD=0x33;
 2c0:	d2 ba       	out	0x12, r13	; 18
 2c2:	ea 01       	movw	r28, r20
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	ef ef       	ldi	r30, 0xFF	; 255
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <main+0x19c>
 2ca:	ea 01       	movw	r28, r20
	{
		RFComm();
		DStar();
	}
	
	OCR1AH=0x00; 
 2cc:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=r;
 2ce:	ea bd       	out	0x2a, r30	; 42
	OCR1BH=0x00; 
 2d0:	19 bc       	out	0x29, r1	; 41
	OCR1BL=l;
 2d2:	28 bd       	out	0x28, r18	; 40
	
	DDRD=0xFF;
 2d4:	c1 ba       	out	0x11, r12	; 17
 2d6:	c3 01       	movw	r24, r6
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x1a8>
 2dc:	6a cf       	rjmp	.-300    	; 0x1b2 <main+0x82>

000002de <RFComm>:
  }
}
void RFComm()
{
	return;
}
 2de:	08 95       	ret

000002e0 <DStar>:
char DStar()
{
	return(1);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
